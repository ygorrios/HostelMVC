@model Camada.Dominio.Mensagens.TelaTotalTransaction

@{
    ViewBag.Title = "Delete";
}

<h2><i class="fa fa-trash"></i> Delete</h2>
<div class="form-horizontal">
    <h4>Transactions</h4>
    <hr />
</div>


<div class="form-horizontal">
    <div class="table-responsive">
        <table id="gridTotalTransactions" class="table table-striped table-bordered table-hover table-responsive dataTable no-footer" cellspacing="0" style=" overflow scroll;">
            <thead class="sorted_head">
                <tr>
                    <th>
                        @Html.DisplayName("Date")
                    </th>
                    <th>
                        @Html.DisplayName("Time")
                    </th>
                    <th>
                        @Html.DisplayName("User")
                    </th>
                    <th>
                        @Html.DisplayName("Reservation Number")
                    </th>
                    <th>
                        @Html.DisplayName("Guest Name")
                    </th>
                    <th>
                        @Html.DisplayName("Transaction Type")
                    </th>
                    <th>
                        @Html.DisplayName("Payment Type")
                    </th>
                    <th>
                        @Html.DisplayName("Card Type")
                    </th>
                    <th>
                        @Html.DisplayName("Description")
                    </th>
                    <th>
                        @Html.DisplayName("Total")
                    </th>
                </tr>
            </thead>
            <tbody></tbody>
            <tfoot>

            </tfoot>
        </table>
    </div>

    @Html.Editor("ID_TOTAL_TRANSACTIONS", new { htmlAttributes = new { @class = "form-control invisivel" } })

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.TotalTransactions, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @Html.EditorFor(model => model.TotalTransactions, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.TotalTransactions, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LastTotalCashier, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @Html.EditorFor(model => model.LastTotalCashier, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.LastTotalCashier, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TotalFinal, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @Html.EditorFor(model => model.TotalFinal, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.TotalFinal, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.TotalCalc, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @Html.EditorFor(model => model.TotalCalc, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.TotalCalc, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DifferenceFinalCalc, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @Html.EditorFor(model => model.DifferenceFinalCalc, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.DifferenceFinalCalc, "", new { @class = "text-danger" })
        </div>
    </div>

</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-group">
        <div class="form-horizontal">

            <div class="form-actions no-color" class="col-md-10">
                <span style="white-space: pre-line">
                    <button type="submit" class="btn btn-default btn-sm pull-left" value="Delete"
                            data-loading-text="
                        <i class='fa fa-circle-o-notch fa-spin'></i> Copied ">
                        <i class="fa fa-trash-o"></i> &nbsp;
                        Delete
                </button>

                    <button type="button" class="btn btn-default btn-sm pull-left" onclick="location.href='@Url.Action("Index", "Transactions")'"
                            data-loading-text="
                        <i class='fa fa-circle-o-notch fa-spin'></i> Copied ">
                        <i class="fa fa-arrow-left"></i> &nbsp;
                        Back to Transactions
                </button>
                </span>
            </div>
        </div>
    </div>
}

<script language="javascript" type="text/javascript">

    var filtro = (new function () {
        var self = this;

        this.tabela = null;
        this.URL = '';
        this.idTotalTransactions = null;

        this.carregar = function () {
            try {
                self.idTotalTransactions = $("#ID_TOTAL_TRANSACTIONS").val();
                self.getDataTable().draw();
            }
            catch (e) {
                console.log(e);
            }
            return false;
        };

        this.getDataTable = function () {
            return self.tabela.DataTable();
        };

        this.init = function () {
            self.tabela = $('#gridTotalTransactions');

            self.tabela.DataTable({
                "language": {
                    "url": "/Scripts/DataTables/Portuguese-Brasil.txt"
                },
                stateSave: true,
                "searching": true,
                "dom": 'rt<"bottom"lp<"clear">>',
                "bServerSide": true,
                "bProcessing": true,
                "bSort": true,
                "sPaginationType": "full_numbers",
                "sAjaxSource": self.URL,
                serverParams: function (aoData) {
                    $.each($("form").serializeArray(), function (indice, dados) {
                        aoData.push(dados);
                    });
                    aoData.push({ "name": "myParam", "value": "myValue" });
                }
            }).on('processing.dt', function (e, settings, processing) {
                var valor = $(this).val();
                var btn = $('#btnExecReport');
                //processing ? btn.button('loading') : btn.button('reset');
            });

            //$('#btnPesquisar').on('click', self.carregar);
        };

        return this;
    });

    filtro.URL = '@Url.Action("getGridTransaction", "TotalTransactions")' + '/' + $("#ID_TOTAL_TRANSACTIONS").val();
    $(filtro.init);
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
